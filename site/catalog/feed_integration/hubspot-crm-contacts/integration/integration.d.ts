/* NOTE: This file is auto generated by Fusebit.
 * Do not edit manually. 
*/
declare module '@fusebit-int/framework' {
  export declare class HubSpotClient {
    automation: {
      actions: {
        callbacksApi: ActionsCallbacksApi;
        definitionsApi: ActionsDefinitionsApi;
        functionsApi: ActionsFunctionsApi;
        revisionsApi: ActionsRevisionsApi;
      };
    };
    oauth: {
      defaultApi: OauthDefaultApi;
      getAuthorizationUrl: (
        clientId: string,
        redirectUri: string,
        scope: string,
        optionalScope?: string,
        state?: string
      ) => string;
    };
    crm: {
      associations: {
        batchApi: AssociationsBatchApi;
        typesApi: TypesApi;
      };
      companies: {
        associationsApi: CompaniesAssociationsApi;
        basicApi: CompaniesBasicApi;
        batchApi: CompaniesBatchApi;
        searchApi: CompaniesSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<companiesModels.SimplePublicObject[]>;
      };
      contacts: {
        associationsApi: ContactsAssociationsApi;
        basicApi: ContactsBasicApi;
        batchApi: ContactsBatchApi;
        searchApi: ContactsSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<contactsModels.SimplePublicObject[]>;
      };
      objects: {
        associationsApi: ObjectsAssociationsApi;
        basicApi: ObjectsBasicApi;
        batchApi: ObjectsBatchApi;
        searchApi: ObjectsSearchApi;
        feedbackSubmissions: {
          associationsApi: FeedbackSubmissionsAssociationsApi;
          basicApi: FeedbackSubmissionsBasicApi;
          batchApi: FeedbackSubmissionsBatchApi;
          searchApi: FeedbackSubmissionsSearchApi;
        };
      };
      deals: {
        associationsApi: DealsAssociationsApi;
        basicApi: DealsBasicApi;
        batchApi: DealsBatchApi;
        searchApi: DealsSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<dealsModels.SimplePublicObject[]>;
      };
      extensions: {
        accounting: {
          callbacksApi: AccountingCallbacksApi;
          invoiceApi: AccountingInvoiceApi;
          settingsApi: AccountingSettingsApi;
          syncApi: AccountingSyncApi;
          userAccountsApi: AccountingUserAccountsApi;
        };
        calling: {
          settingsApi: СallingSettingsApi;
        };
        cards: {
          cardsApi: CardsApi;
          sampleResponseApi: CardsSampleResponseApi;
        };
        videoconferencing: {
          settingsApi: VideoconferencingSettingsApi;
        };
      };
      imports: {
        coreApi: ImportsCoreApi;
      };
      lineItems: {
        associationsApi: LineItemsAssociationsApi;
        basicApi: LineItemsBasicApi;
        batchApi: LineItemsBatchApi;
        searchApi: LineItemsSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<lineItemsModels.SimplePublicObject[]>;
      };
      owners: {
        defaultApi: OwnersDefaultApi;
      };
      pipelines: {
        pipelinesApi: PipelinesApi;
        pipelineStagesApi: PipelineStagesApi;
      };
      products: {
        associationsApi: ProductsAssociationsApi;
        basicApi: ProductsBasicApi;
        batchApi: ProductsBatchApi;
        searchApi: ProductsSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<productsModels.SimplePublicObject[]>;
      };
      properties: {
        batchApi: PropertiesBatchApi;
        coreApi: PropertiesCoreApi;
        groupsApi: PropertiesGroupsApi;
      };
      quotes: {
        associationsApi: QuotesAssociationsApi;
        basicApi: QuotesBasicApi;
        batchApi: QuotesBatchApi;
        searchApi: QuotesSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<quotesModels.SimplePublicObject[]>;
      };
      schemas: {
        coreApi: SchemasCoreApi;
        defaultApi: SchemasDefaultApi;
      };
      tickets: {
        associationsApi: TicketsAssociationsApi;
        basicApi: TicketsBasicApi;
        batchApi: TicketsBatchApi;
        searchApi: TicketsSearchApi;
        getAll: (
          limit?: number,
          after?: string,
          properties?: string[],
          associations?: string[],
          archived?: boolean,
          options?: {
            headers: {
              [name: string]: string;
            };
          }
        ) => Promise<ticketsModels.SimplePublicObject[]>;
      };
      timeline: {
        eventsApi: EventsApi;
        templatesApi: TemplatesApi;
        tokensApi: TokensApi;
      };
    };
    events: {
      eventsApi: EventsEventsApi;
    };
    marketing: {
      transactional: {
        defaultApi: TransactionalDefaultApi;
      };
    };
    webhooks: {
      settingsApi: SettingsApi;
      subscriptionsApi: SubscriptionsApi;
      validateSignature: (
        signature: string,
        clientSecret: string,
        requestBody: string,
        signatureVersion?: string,
        webhooksUrl?: string,
        webhooksMethod?: string
      ) => boolean;
    };
    cms: {
      auditLogs: {
        defaultApi: AuditLogsDefaultApi;
      };
      blogs: {
        authors: {
          defaultApi: AuthorsDefaultApi;
        };
        blogPosts: {
          defaultApi: BlogPostsDefaultApi;
        };
        tags: {
          defaultApi: TagsDefaultApi;
        };
      };
      domains: {
        domainsApi: DomainsApi;
      };
      hubdb: {
        rowsApi: RowsApi;
        rowsBatchApi: RowsBatchApi;
        tablesApi: TablesApi;
      };
      performance: {
        defaultApi: PerformanceDefaultApi;
      };
      urlRedirects: {
        redirectsApi: RedirectsApi;
      };
      siteSearch: {
        defaultApi: SiteSearchDefaultApi;
      };
    };
    communicationPreferences: {
      definitionApi: CommunicationPreferencesDefinitionApi;
      statusApi: CommunicationPreferencesStatusApi;
    };
    conversations: {
      visitorIdentification: {
        generateApi: GenerateApi;
      };
    };
    protected _interceptors: Interceptor[];
    protected _actionsCallbacksApi: ActionsCallbacksApi;
    protected _actionsDefinitionsApi: ActionsDefinitionsApi;
    protected _actionsFunctionsApi: ActionsFunctionsApi;
    protected _actionsRevisionsApi: ActionsRevisionsApi;
    protected _oauthDefaultApi: OauthDefaultApi;
    protected _associationsBatchApi: AssociationsBatchApi;
    protected _typesApi: TypesApi;
    protected _communicationPreferencesDefinitionApi: CommunicationPreferencesDefinitionApi;
    protected _communicationPreferencesStatusApi: CommunicationPreferencesStatusApi;
    protected _companiesAssociationsApi: CompaniesAssociationsApi;
    protected _companiesBasicApi: CompaniesBasicApi;
    protected _companiesBatchApi: CompaniesBatchApi;
    protected _companiesSearchApi: CompaniesSearchApi;
    protected _contactsAssociationsApi: ContactsAssociationsApi;
    protected _contactsBasicApi: ContactsBasicApi;
    protected _contactsBatchApi: ContactsBatchApi;
    protected _contactsSearchApi: ContactsSearchApi;
    protected _feedbackSubmissionsAssociationsApi: FeedbackSubmissionsAssociationsApi;
    protected _feedbackSubmissionsBasicApi: FeedbackSubmissionsBasicApi;
    protected _feedbackSubmissionsBatchApi: FeedbackSubmissionsBatchApi;
    protected _feedbackSubmissionsSearchApi: FeedbackSubmissionsSearchApi;
    protected _objectsAssociationsApi: ObjectsAssociationsApi;
    protected _objectsBasicApi: ObjectsBasicApi;
    protected _objectsBatchApi: ObjectsBatchApi;
    protected _objectsSearchApi: ObjectsSearchApi;
    protected _dealsAssociationsApi: DealsAssociationsApi;
    protected _dealsBasicApi: DealsBasicApi;
    protected _dealsBatchApi: DealsBatchApi;
    protected _dealsSearchApi: DealsSearchApi;
    protected _accountingCallbacksApi: AccountingCallbacksApi;
    protected _accountingInvoiceApi: AccountingInvoiceApi;
    protected _accountingSettingsApi: AccountingSettingsApi;
    protected _accountingSyncApi: AccountingSyncApi;
    protected _accountingUserAccountsApi: AccountingUserAccountsApi;
    protected _callingSettingsApi: СallingSettingsApi;
    protected _cardsApi: CardsApi;
    protected _cardsSampleResponseApi: CardsSampleResponseApi;
    protected _videoconferencingSettingsApi: VideoconferencingSettingsApi;
    protected _importsCoreApi: ImportsCoreApi;
    protected _lineItemsAssociationsApi: LineItemsAssociationsApi;
    protected _lineItemsBasicApi: LineItemsBasicApi;
    protected _lineItemsBatchApi: LineItemsBatchApi;
    protected _lineItemsSearchApi: LineItemsSearchApi;
    protected _ownersDefaultApi: OwnersDefaultApi;
    protected _pipelinesApi: PipelinesApi;
    protected _pipelineStagesApi: PipelineStagesApi;
    protected _productsAssociationsApi: ProductsAssociationsApi;
    protected _productsBasicApi: ProductsBasicApi;
    protected _productsBatchApi: ProductsBatchApi;
    protected _productsSearchApi: ProductsSearchApi;
    protected _propertiesBatchApi: PropertiesBatchApi;
    protected _propertiesCoreApi: PropertiesCoreApi;
    protected _propertiesGroupsApi: PropertiesGroupsApi;
    protected _quotesAssociationsApi: QuotesAssociationsApi;
    protected _quotesBasicApi: QuotesBasicApi;
    protected _quotesBatchApi: QuotesBatchApi;
    protected _quotesSearchApi: QuotesSearchApi;
    protected _schemasDefaultApi: SchemasDefaultApi;
    protected _schemasCoreApi: SchemasCoreApi;
    protected _ticketsAssociationsApi: TicketsAssociationsApi;
    protected _ticketsBasicApi: TicketsBasicApi;
    protected _ticketsBatchApi: TicketsBatchApi;
    protected _ticketsSearchApi: TicketsSearchApi;
    protected _eventsApi: EventsApi;
    protected _templatesApi: TemplatesApi;
    protected _tokensApi: TokensApi;
    protected _eventsEventsApi: EventsEventsApi;
    protected _transactionalDefaultApi: TransactionalDefaultApi;
    protected _settingsApi: SettingsApi;
    protected _subscriptionsApi: SubscriptionsApi;
    protected _auditLogsDefaultApi: AuditLogsDefaultApi;
    protected _authorsDefaultApi: AuthorsDefaultApi;
    protected _blogPostsDefaultApi: BlogPostsDefaultApi;
    protected _tagsDefaultApi: TagsDefaultApi;
    protected _siteSearchDefaultApi: SiteSearchDefaultApi;
    protected _domainsApi: DomainsApi;
    protected _rowsApi: RowsApi;
    protected _rowsBatchApi: RowsBatchApi;
    protected _tablesApi: TablesApi;
    protected _performanceDefaultApi: PerformanceDefaultApi;
    protected _redirectsApi: RedirectsApi;
    protected _generateApi: GenerateApi;
    protected _apiClientsWithApiKeyAuth: any[];
    protected _apiClientsWithDevApiKeyAuth: any[];
    protected _apiClients: any[];
    protected _apiKey: string | undefined;
    protected _developerApiKey: string | undefined;
    protected _basePath: string;
    protected _accessToken: string | undefined;
    protected _defaultHeaders: object | undefined;
    protected authentications: {
      hapikey: ApiKeyAuth;
      oauth2: OAuth;
    };
    protected _limiter: Bottleneck | undefined;
    protected _searchLimiter: Bottleneck | undefined;
    protected _numberOfApiCallRetries: NumberOfRetries;
    protected _useLimiter: boolean;
    protected _useSearchLimiter: boolean;
    protected _limiterOptions: LimiterOptions | undefined;
    protected _searchLimiterOptions: LimiterOptions | undefined;
    constructor(options?: {
      apiKey?: string;
      accessToken?: string;
      basePath?: string;
      defaultHeaders?: object;
      developerApiKey?: string;
      useLimiter?: boolean;
      limiterOptions?: LimiterOptions;
      numberOfApiCallRetries?: NumberOfRetries;
      interceptors?: Interceptor[];
    });
    setApiKey(apiKeyToSet: string): void;
    setDeveloperApiKey(developerApiKeyToSet: string): void;
    setBasePath(basePathToSet?: string): void;
    setAccessToken(accessTokenToSet: string): void;
    addInterceptor(interceptor: Interceptor): void;
    setDefaultHeaders(defaultHeadersToSet?: object): void;
    setAuth(options?: { apiKey?: string; developerApiKey?: string; accessToken?: string }): void;
    getOptions(): {
      basePath: string | undefined;
      defaultHeaders: object | undefined;
      apiKey: string | undefined;
      developerApiKey: string | undefined;
      accessToken: string | undefined;
      useLimiter: boolean;
      limiterOptions: LimiterOptions | undefined;
      numberOfApiCallRetries: NumberOfRetries;
      interceptors: Interceptor[];
    };
    apiRequest(
      opts: any
    ): Promise<{
      response: http.IncomingMessage;
      body?: any;
    }>;
    protected _getAuthorizationUrl(
      clientId: string,
      redirectUri: string,
      scope: string,
      optionalScope?: string,
      state?: string
    ): string;
    protected _validateSignature(
      signature: string,
      clientSecret: string,
      requestBody: string,
      signatureVersion?: string,
      webhooksUrl?: string,
      webhooksMethod?: string
    ): boolean;
    private _retrieveGetAllFunction;
    private _setOptions;
    private _setUseQuerystring;
    private _getLimiterWrappedMethod;
    private _getSearchLimiterWrappedMethod;
    private _waitAfterRequestFailure;
    private _getRetryWrappedMethod;
    private _patchApiClientMethod;
    private _patchApiClient;
    private _patchApiClients;
    private _patchApiRequestMethod;
    private _setMethodsPatchOptions;
    private _setInterceptors;
  }

  export declare class Tenant {
    <%# connectors %>

     /**
     * Get HubSpot Client SDK for <% name %>
     * @param ctx The context object provided by the route function
     * @param {string} connectorName
     * @param {string} tenantId
     * @returns Promise<HubSpotClient>
     */
    getSdkByTenant(ctx: any, connectorName: '<% name %>', tenantId: string): Promise<HubSpotClient>;

   <%/ connectors %>
  }

  export declare class Middleware {
    /** Authorize user middleware
    * (Read more at https://developer.fusebit.io/docs/integration-programming-model#protecting-your-api)
    * @param {string} action The name of the action to authorize (i.e instance:get)
    */
     authorizeUser:(action:string) => (ctx: any, next: import("koa").Next) => Promise<undefined>;
 }

  export declare class Service {
    <%# connectors %>
    
        /**
        * Get HubSpot Client SDK for <% name %>
        * @param ctx The context object provided by the route function
        * @param {string} connectorName
        * @param {string} instanceId
        * @returns Promise<HubSpotClient>
        */
        getSdk: (ctx: any, connectorName: '<% name %>', instanceId: string) => Promise<HubSpotClient>;
        
    <%/ connectors %>

    /** Get an instantiated SDK for each specified connector
     * @param ctx The context object provided by the route function
     * @param {string[]} connectorNames
    */
    getSdks: (ctx: any, connectorNames: string[], instanceId: string) => Promise<any>[];
    
    /** Get a specific instance
     * @param ctx The context object provided by the route function
     * @param {string} instanceId
    */
    getInstance: (ctx: any, instanceId: string) => Promise<any>;
}

export interface IListOption {
  count?: number;
  next?: string;
}

export interface IStorageVersionedResponse {
    storageId: string;
    data?: any;
    version?: string;
    tags?: Record<string, string>;
    status: number;
}

export interface IStorageVersionedResponseList {
    items: Omit<IStorageVersionedResponse, 'status'>[];
    total: number;
    status: number;
    next: string;
}

export interface IStorageVersionedResponseDelete {
    status: number;
  }

abstract class StorageBase {
  /** Save any data in JSON format up to ~400Kb in size.
   * @example
   * ```
   * router.post('/api/tenant/:tenantId/colors', async (ctx) => {
   *    // By convention we use / symbol to represent a bucket, but you can use any name you want.
   *    const bucketName = '/my-bucket/';
   *    const key = 'colors';
   *    const data = ['green', 'blue'];
   *    const result = await integration.storage.setData(ctx, `${bucketName}${key}`, data);
   *    ctx.body = result;
   * });
   * ```
   * @param ctx The context object provided by the route function
   * @param {string} dataKey represents a reference to your data that you will use in further operations like read, delete and update
   * @param {string} data Any valid JSON
  */
  setData: (ctx: any, dataKey: string, data: any) => Promise<IStorageVersionedResponse>;
  /** Get saved data
   * @param ctx The context object provided by the route function
   * @param {string} dataKey the key name used for referencing the stored data
  */
  getData: (ctx: any, dataKey: string) => Promise<IStorageVersionedResponse>;

  /** A listing operation query data stored in an artifact known as a Bucket
   * (Buckets are collections of keys where you can store related data).
   * Read more at https://developer.fusebit.io/docs/integration-programming-model#listing-data
   * @example
   * ```
   * router.get('/api/tenant/:tenantId/my-bucket', async (ctx) => {
   *        const bucketName = '/my-bucket/';
   *        const result = await integration.storage.listData(ctx, bucketName);
   *        ctx.body = result;
   * });
   * ```
   * @param ctx The context object provided by the route function
   * @param {string} dataKeyPrefix The bucket name 
  */
  listData: (ctx: any, dataKeyPrefix: string, options?: IListOption) => Promise<IStorageVersionedResponseList>;
  /** Delete data
   * @param ctx The context object provided by the route function
   * @param {string} dataKey reference the key name used for storing the data
   * @param {string=} version Delete a specific version of the stored data
  */
  deleteData: (ctx: any, dataKey: string, version?: string) => Promise<IStorageVersionedResponseDelete>;
  /** Delete data stored in an artifact known as a Bucket
   * (This function will remove a collection of keys stored under the specified Bucket).
   * @param ctx The context object provided by the route function
   * @param {string} dataKeyPrefix The bucket name 
   * @param {string=} version Delete a specific version of the Bucket
  */
  deletePrefixedData: (ctx: any, dataKeyPrefix: string, version?: string) => Promise<IStorageVersionedResponseDelete>;

    /** Delete data stored in an artifact known as a Bucket
   * (This function will remove a collection of keys stored under the specified Bucket).
   * @param ctx The context object provided by the route function
   * @param {boolean} forceDelete
  */
  deleteAllData: (ctx: any, forceDelete: boolean) => Promise<IStorageVersionedResponseDelete>;
}

  export declare class Integration {
    tenant: Tenant;
    service: Service;
    middleware: Middleware;
    storage: StorageBase;
  }
}
