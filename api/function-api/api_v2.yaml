openapi: 3.0.0
security:
  - AccessToken: []

servers:
  - url: https://api.{region}.on.fusebit.io
    description: Production
    variables:
      region:
        description: |
          The region where the API is deployed, for example `'us-east-1'`
        default: 'us-east-1'

info:
  description: Fusebit HTTP API for the management and execution of Fusebit
    accounts, users, functions and more
  version: '1.0.0'
  title: 'Fusebit HTTP API - v2'
  contact:
    email: contact@fusebit.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: Session
    description: An active configuration phase for a customer
  - name: Connector
    description: Management for external credentials
  - name: Identity
    description: |
      A managed credential for a remote service, on behalf of a customer
  - name: Integration
    description: The logic necessary to integrate between two services
  - name: Instance
    description: A fully configured integration for a customer

paths:
  #############################################################################
  # Session
  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
    post:
      tags:
        - Session
      summary: Create a new session
      description: Create a new session on behalf of a new user, or to allow an existing
        user to reconfigure their integration.
      operationId: createSession
      requestBody:
        $ref: '#/components/requestBodies/PostSessionBody'
      responses:
        200:
          description: The created session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session/{sessionId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/SessionId'
    get:
      tags:
        - Session
      summary: Get a session
      description: Get the inputs and outputs of an existing session.
      operationId: getSession
      responses:
        200:
          description: The session entity with results from any operations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResult'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

    put:
      tags:
        - Session
      summary: Update a session's output
      description: Write the outputs of an configuration to a session. Primarily used in on
        configuration form submission in an integration, or in a connector.
      operationId: putSession
      requestBody:
        $ref: '#/components/requestBodies/PutSessionBody'
      responses:
        200:
          description: The created session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResult'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session/{sessionId}/commit:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/SessionId'
    post:
      tags:
        - Session
      summary: Commit a session
      description: Commit the session, creating the necessary instance and identity
        entities, or updating the configuration of existing entities as necessary.
      operationId: postSession
      responses:
        200:
          description: The session has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInstanceIdResponse'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'

  #############################################################################
  # Connector
  /v2/account/{accountId}/subscription/{subscriptionId}/connector:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
    get:
      tags:
        - Connector
      summary: Search for and retrieve entities of the specified type
      operationId: searchConnectors
      parameters:
        - $ref: '#/components/parameters/SearchIdPrefix'
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
        - $ref: '#/components/parameters/SearchStatus'
      responses:
        200:
          description: A list of the entities found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/connector/{connectorId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: connectorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    post:
      tags:
        - Connector
      summary: Create a new entity of the specified type
      operationId: postConnector
      requestBody:
        $ref: '#/components/requestBodies/PostConnectorBody'
      responses:
        202:
          $ref: '#/components/responses/Connector202'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    get:
      tags:
        - Connector
      summary: Get a connector
      operationId: getConnector
      responses:
        200:
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorEntity'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    put:
      tags:
        - Connector
      summary: Update a connector
      operationId: putConnector
      requestBody:
        $ref: '#/components/requestBodies/PostConnectorBody'
      responses:
        202:
          $ref: '#/components/responses/Connector202'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    delete:
      tags:
        - Connector
      summary: Delete a connector
      operationId: deleteConnector
      responses:
        202:
          $ref: '#/components/responses/Connector202'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
      security:
        - AccessToken: []

  #############################################################################
  # Identity
  /v2/account/{accountId}/subscription/{subscriptionId}/connector/{connectorId}/identity/:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: connectorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - Identity
      summary: Search for and retrieve entities of the specified type
      operationId: searchIdentities
      parameters:
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
      responses:
        200:
          description: A list of the entities found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityList'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/connector/{connectorId}/identity/{identityId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: connectorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      - name: identityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdentityId'
    get:
      tags:
        - Identity
      summary: Get an identity
      operationId: getIdentity
      responses:
        200:
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityEntity'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    put:
      tags:
        - Identity
      summary: Update an identity
      operationId: putIdentity
      requestBody:
        $ref: '#/components/requestBodies/PostIdentityBody'
      responses:
        200:
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityEntity'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    delete:
      tags:
        - Identity
      summary: Delete an identity
      operationId: deleteIdentity
      responses:
        204:
          description: The entity deletion succeeded
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  #############################################################################
  # Integration
  /v2/account/{accountId}/subscription/{subscriptionId}/integration:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
    get:
      tags:
        - Integration
      summary: Search for and retrieve entities of the specified type
      operationId: searchIntegrations
      parameters:
        - $ref: '#/components/parameters/SearchIdPrefix'
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
        - $ref: '#/components/parameters/SearchStatus'
      responses:
        200:
          description: A list of the entities found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationList'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/integration/{integrationId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: integrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    post:
      tags:
        - Integration
      summary: Create a new entity of the specified type
      operationId: postIntegration
      requestBody:
        $ref: '#/components/requestBodies/PostIntegrationBody'
      responses:
        202:
          $ref: '#/components/responses/Integration202'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    get:
      tags:
        - Integration
      summary: Get an integration
      operationId: getIntegration
      responses:
        200:
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationEntity'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    put:
      tags:
        - Integration
      summary: Update an integration
      operationId: putIntegration
      requestBody:
        $ref: '#/components/requestBodies/PostIntegrationBody'
      responses:
        202:
          $ref: '#/components/responses/Integration202'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    delete:
      tags:
        - Integration
      summary: Delete an integration
      operationId: deleteIntegration
      responses:
        202:
          $ref: '#/components/responses/Integration202'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
      security:
        - AccessToken: []

  #############################################################################
  # Instance
  /v2/account/{accountId}/subscription/{subscriptionId}/integration/{integrationId}/instance/:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: integrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - Instance
      summary: Search for and retrieve entities of the specified type
      operationId: searchInstances
      parameters:
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
      responses:
        200:
          description: A list of the entities found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/integration/{integrationId}/instance/{instanceId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: integrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      - name: instanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InstanceId'
    get:
      tags:
        - Instance
      summary: Get an instance
      operationId: getInstance
      responses:
        200:
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceEntity'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    put:
      tags:
        - Instance
      summary: Update an instance
      operationId: putInstance
      requestBody:
        $ref: '#/components/requestBodies/PostInstanceBody'
      responses:
        200:
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceEntity'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
      security:
        - AccessToken: []
    delete:
      tags:
        - Instance
      summary: Delete an instance
      operationId: deleteInstance
      responses:
        204:
          description: The entity deletion succeeded
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
      security:
        - AccessToken: []

#############################################################################
# Components

components:
  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: For a description of the access token format, see
        [this doc](../../integrator-guide/authz-model).

  parameters:
    Account:
      name: accountId
      in: path
      required: true
      description: Account id
      schema:
        $ref: '#/components/schemas/AccountId'
    Subscription:
      name: subscriptionId
      in: path
      required: true
      description: Subscription id
      schema:
        $ref: '#/components/schemas/SubscriptionId'
    EntityType:
      name: entityType
      required: true
      in: path
      description: The type of the entity
      schema:
        $ref: '#/components/schemas/EntityType'
    EntityId:
      name: entityId
      in: path
      required: true
      description: The id of the entity
      schema:
        $ref: '#/components/schemas/EntityId'
    SessionId:
      name: sessionId
      in: path
      required: true
      description: The id of the session
      schema:
        $ref: '#/components/schemas/SessionId'

    SearchIdPrefix:
      name: idPrefix
      in: query
      description: A prefix to use when searching for a particular entity by id.
        For example, to search for all integrations that start with a particular
        service name.
      schema:
        type: string
    SearchCount:
      name: count
      in: query
      description: The maximum number of entries to return
      schema:
        type: number
    SearchNext:
      name: next
      in: query
      description: The key to use to retrieve the next set of results
      schema:
        type: string
    SearchTag:
      name: tag
      in: query
      description: A `tagName` or `tagName=tagValue` to search for. Can be specified multiple times in a query
        parameter to indicate multiple tag values to require in the results.
      schema:
        type: string
    SearchStatus:
      name: status
      in: query
      description: Search for entities matching a particular status, `creating`, `invalid`, or `active.
      schema:
        $ref: '#/components/schemas/EntityState'

  requestBodies:
    PostConnectorBody:
      description: Upload a new entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorPostEntity'

    PostIdentityBody:
      description: Upload a new entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdentityEntity'

    PostIntegrationBody:
      description: Upload a new entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IntegrationPostEntity'

    PostInstanceBody:
      description: Upload a new entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InstanceEntity'

    PostSessionBody:
      description: Create a new session on an integration
      content:
        application/json:
          schema:
            type: object
            required:
              - redirectUrl
            properties:
              components:
                type: array
                description: A list of the desired components to configure. If not present,
                  then all components specified in the integration are
                  configured in this session.
                items:
                  type: string
              tags:
                description: A collection of tags that will be added to instance entities created during this session.
                allOf:
                  - $ref: '#/components/schemas/EntityTags'
              extendTags:
                description: If set to `true`, add the tags present on the integration in the `data.componentTags` field
                  to any instances created during this session. If set to `false`, only use the tags specified on the
                  session directly.
                default: false
              input:
                $ref: '#/components/schemas/SessionInput'
              redirectUrl:
                type: string
                description: The URL in your infrastructure that the user should return to
                  after completing the session.
              instanceId:
                type: string
                description: Used when reconfiguring an existing user. Specifies the
                  instance associated with that user.

    PutSessionBody:
      description: The results of a configuration action, such as a form.
      content:
        application/json:
          schema:
            type: object

  responses:
    Connector202:
      description: The entity creation is in progress. While the `operationStatus.status` value is
        `processing`, the entity is still being created. Once the `operationStatus.status` value is
        `success`, the entity is available for use.

        On failure, `operationStatus.status` will be set to `failed` and `state` will be `invalid`.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorEntity'

    Integration202:
      description: The entity creation is in progress. While the `operationStatus.status` value is
        `processing`, the entity is still being created. Once the `operationStatus.status` value is
        `success`, the entity is available for use.

        On failure, `operationStatus.status` will be set to `failed` and `state` will be `invalid`.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IntegrationEntity'

    400:
      description: The request submitted is invalid. Please, check the documentation and
        fix the request before sending it again.
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - statusCode
              - message
            properties:
              status:
                type: number
                description: The HTTP status code
                example: 400
              statusCode:
                type: number
                description: The HTTP status code
                example: 400
              message:
                type: string
                description: A message with details regarding the error
                example: Field redirectUrl is required.
    403:
      description: Access to the requested resource is forbidden.
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - statusCode
              - message
            properties:
              status:
                type: number
                description: The HTTP status code
                example: 403
              statusCode:
                type: number
                description: The HTTP status code
                example: 403
              message:
                type: string
                description: A message with details regarding the error
                example: Unauthorized
    404:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - statusCode
              - message
            properties:
              status:
                type: number
                description: The HTTP status code
                example: 404
              statusCode:
                type: number
                description: The HTTP status code
                example: 404
              message:
                type: string
                description: A message with details regarding the error
                example: Resource not found

  schemas:
    AccountId:
      type: string
      description: Account id
      example: 'acc-5555555555555555'

    SubscriptionId:
      type: string
      description: Subscription id
      example: 'sub-5555555555555555'

    EntityId:
      type: string
      description: |
        The name of an entity, matches: `/^[A-Za-z0-9\-]{1,64}$/)`

    InstanceId:
      type: string
      format: uuid

    IdentityId:
      type: string
      format: uuid

    EntityType:
      type: string
      enum: [connector, integration, identity, instance]
      example: connector

    EntityState:
      type: string
      enum: [creating, invalid, active]
      example: active

    OperationType:
      type: string
      enum: ['creating', 'updating', 'deleting']
      example: updating

    OperationStatus:
      type: string
      enum: ['success', 'failed', 'processing']
      example: processing

    OperationErrorCode:
      type: string
      enum: ['OK', 'InvalidParameterValue', 'UnauthorizedOperation', 'VersionConflict', 'InternalError', 'RequestLimitExceeded']
      example: OK

    OperationStatusObject:
      type: object
      description: Contains the status of the last action taken on this entity
      properties:
        operation:
          $ref: '#/components/schemas/OperationType'
        status:
          $ref: '#/components/schemas/OperationStatus'
        message:
          type: string
        errorCode:
          $ref: '#/components/schemas/OperationErrorCode'
        errorDetails:
          type: string

    EntityTags:
      type: object
      description: An hash containing tags set on this entity
      example:
        tenant: tenant-525
        customer: Sonicity

    EntityVersion:
      type: string
      format: uuid

    EntityExpires:
      type: string
      description: The time that the entity expires and is automatically removed from the system.

    DateAdded:
      type: string
      format: date-time

    DateModified:
      type: string
      format: date-time

    EntityConfiguration:
      type: object
      description: The collection of configuration values used by this entity.

    EntityFiles:
      type: object
      description: The collection of filename and content pairs that are packaged with this entity.

    SessionId:
      type: string
      format: uuid
      description: The id of the session

    Session:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SessionId'

    SessionResult:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        input:
          type: object
        output:
          type: object
        dependsOn:
          type: object

    SessionInput:
      type: object
      example:
        slack-integration:
          useDemo: true
      description: A collection of input variables to make available to
        components as they are configured. Each key must correspond
        with an entry in the component array, and carries
        configuration that will only be available to that component.

    SessionOutput:
      type: object
      example:
        slack-integration:
          channel: '#general'
      description: A collection of output configuration elements created by the various
        steps, and stored on the instance for use in the integration.

    SessionInstanceIdResponse:
      type: object
      properties:
        instanceId:
          $ref: '#/components/schemas/InstanceId'

    EntityLocation:
      type: object
      required:
        - accountId
        - subscriptionId
        - entityId
        - entityType
      description: The location of a particular entity.
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        subscriptionId:
          $ref: '#/components/schemas/SubscriptionId'
        entityId:
          $ref: '#/components/schemas/EntityId'
        entityType:
          $ref: '#/components/schemas/EntityType'

    ConnectorEntityData:
      type: object
      properties:
        handler:
          type: string
          description: The npm package name used by this connector.
          example: '@fusebit-int/oauth-connector'
        configuration:
          $ref: '#/components/schemas/EntityConfiguration'
        files:
          $ref: '#/components/schemas/EntityFiles'

    ConnectorEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/ConnectorEntityData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'
        state:
          $ref: '#/components/schemas/EntityState'
        operationStatus:
          $ref: '#/components/schemas/OperationStatusObject'

    ConnectorPostEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/ConnectorEntityData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'
        state:
          $ref: '#/components/schemas/EntityState'
        operationStatus:
          $ref: '#/components/schemas/OperationStatusObject'

    ConnectorListEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          type: object
          properties:
            handler:
              type: string
              description: The npm package name used by this connector.
              example: '@fusebit-int/oauth-connector'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'
        state:
          $ref: '#/components/schemas/EntityState'
        operationStatus:
          $ref: '#/components/schemas/OperationStatusObject'

    ConnectorList:
      type: object
      properties:
        items:
          type: array
          description: An array of the matching entities of this component type
          items:
            $ref: '#/components/schemas/ConnectorListEntity'
        next:
          type: string
          description: The key to use when accessing the next block of entries
        total:
          type: number
          description: The total number of entities of this type.

    IdentityEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        data:
          type: object
          description: The data used by the creating connector to establish a relationship
            with the remote service on behalf of a user.
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'

    IdentityList:
      type: object
      properties:
        items:
          type: array
          description: An array of the matching entities of this component type
          items:
            $ref: '#/components/schemas/IdentityEntity'
        next:
          type: string
          description: The key to use when accessing the next block of entries
        total:
          type: number
          description: The total number of entities of this type.

    IntegrationData:
      type: object
      properties:
        handler:
          type: string
          description: The name of the file that is the entrypoint for this integration.
          example: './integration'
        configuration:
          $ref: '#/components/schemas/EntityConfiguration'
        files:
          type: object
          description: An array of files, keyed by filename, that are included
            in this integration. This includes the file referenced by the
            `handler` field.
        componentTags:
          type: object
          description: These tags are added to instances and identities created through
            this integration.
        components:
          type: array
          description: Connectors and other configuration endpoints such as forms located
            on this integration are itemized here, in order that the client will
            encounter them.
          items:
            type: object
            properties:
              name:
                type: string
                description: An arbirary name used to reference this component from within
                  integration code.
              entityType:
                type: string
                enum: [connector, integration]
                description: Does this component reference a connector, to acquire a new identity for the user of this
                  integration, or an integration form specified by the `path` parameter?
              entityId:
                $ref: '#/components/schemas/EntityId'
              skip:
                type: boolean
                default: false
                description: Some components are only used in special cases and as specified during session creation; if
                  `skip` is true, then this component is not part of the normal client configuration process.
              path:
                type: string
                description: The location under the entity specified to pass the client to
                  during a configuration process. For connector type components, this field is optional and will default
                  to `/api/authorize`.  For integration type components, this field indicates the location on the
                  connector that the browser will load as part of it's configuration process.
                example: /api/authorize
                  /api/channelSelectForm
              dependsOn:
                type: array
                description: Allows this component to make use of the credentials or
                  configuration values created by prior components. For example,
                  a form could use slack credentials created by a connector
                  named `slack` to lookup channels by adding `slack` to this
                  list.
                items:
                  type: string
                  description: The `name` of a component that occurs previously in the
                    `components` array.
              provider:
                type: string
                description: The utility package for a connector that provides a configured
                  SDK for use by the integration.

    IntegrationListData:
      type: object
      properties:
        handler:
          type: string
          description: The name of the file that is the entrypoint for this integration.
          example: './integration'
        componentTags:
          type: object
          description: These tags are added to instances and identities created through
            this integration.
        components:
          type: array
          description: Connectors and other configuration endpoints such as forms located
            on this integration are itemized here, in order that the client will
            encounter them.
          items:
            type: object
            properties:
              name:
                type: string
                description: An arbirary name used to reference this component from within
                  integration code.
              entityType:
                type: string
                enum: [connector, integration]
                description: Does this component reference a connector or an integration?
              entityId:
                $ref: '#/components/schemas/EntityId'
              skip:
                type: boolean
                default: false
                description: Some components are only used in special cases and as
                  specified during session creation; if `skip` is true, then
                  this component is not part of the normal client configuration
                  process.
              path:
                type: string
                description: The location under the entity specified to pass the client to
                  during a configuration process.
                example: /api/authorize
                  /api/channelSelectForm
              dependsOn:
                type: array
                description: Allows this component to make use of the credentials or
                  configuration values created by prior components. For example,
                  a form could use slack credentials created by a connector
                  named `slack` to lookup channels by adding `slack` to this
                  list.
                items:
                  type: string
                  description: The `name` of a component that occurs previously in the
                    `components` array.
              provider:
                type: string
                description: The utility package for a connector that provides a configured
                  SDK for use by the integration.

    IntegrationEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/IntegrationData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'
        state:
          $ref: '#/components/schemas/EntityState'
        operationStatus:
          $ref: '#/components/schemas/OperationStatusObject'

    IntegrationPostEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/IntegrationData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'
        state:
          $ref: '#/components/schemas/EntityState'
        operationStatus:
          $ref: '#/components/schemas/OperationStatusObject'

    IntegrationListEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/IntegrationListData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'
        state:
          $ref: '#/components/schemas/EntityState'
        operationStatus:
          $ref: '#/components/schemas/OperationStatusObject'

    IntegrationList:
      type: object
      properties:
        items:
          type: array
          description: An array of the matching entities of this component type
          items:
            $ref: '#/components/schemas/IntegrationListEntity'
        next:
          type: string
          description: The key to use when accessing the next block of entries
        total:
          type: number
          description: The total number of entities of this type.

    InstanceEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InstanceId'
        data:
          type: object
          description: A hash of configuration objects key'ed by the `name` in the
            `data.components` object under the integration. A configuration object
            that refers to a integration form will contain the configured value,
            whereas a configuration object that refers to a connector will refer
            to the identity entity used by this instance.
          example:
            slack:
              tags:
                tenantId: client-15251
              entityId: f31bc788-1a15-4d6d-b10e-bb754bbf555d
              accountId: acc-12de369f2f0c4982
              entityType: identity
              parentEntityId: slack-connector
              subscriptionId: sub-a477d980e09c1cfe
              parentEntityType: connector
            channelSelectForm:
              channel: \#random
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'
        dateAdded:
          $ref: '#/components/schemas/DateAdded'
        dateModified:
          $ref: '#/components/schemas/DateModified'

    InstanceList:
      type: object
      properties:
        items:
          type: array
          description: An array of the matching entities of this component type
          items:
            $ref: '#/components/schemas/InstanceEntity'
        next:
          type: string
          description: The key to use when accessing the next block of entries
        total:
          type: number
          description: The total number of entities of this type.
