openapi: 3.0.0
security:
  - AccessToken: []

servers:
  - url: https://api.{region}.fusebit.io
    description: Production
    variables:
      region:
        description: |
          The region where the API is deployed, for example `'us-east-1'`
        default: 'us-east-1'

info:
  description:
    Fusebit HTTP API for the management and execution of Fusebit accounts,
    users, functions and more
  version: '1.0.0'
  title: 'Fusebit HTTP API - v2'
  contact:
    email: contact@fusebit.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: Operation
    description: Active operations tracking an asynchronous action
  - name: Session
    description: An active configuration phase for a customer
  - name: Connector
    description: Management for external credentials
  - name: Identity
    description: |
      A managed credential for a remote service, on behalf of a customer
  - name: Integration
    description: The logic necessary to integrate between two services
  - name: Instance
    description: A fully configured integration for a customer

paths:
  #############################################################################
  # Operation
  /v2/account/{accountId}/subscription/{subscriptionId}/operation:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
    post:
      tags:
        - Operation
      summary: Create a new operation
      operationId: postNewOperation
      description: |
        Creates a new operation using the payload as the operation status.
      requestBody:
        description: The operation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operation'
      responses:
        200:
          description: An operation was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationIdResponse'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/operation/{operationId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: operationId
        in: path
        required: true
        description: Operation id
        schema:
          $ref: '#/components/schemas/OperationId'
    get:
      tags:
        - Operation
      summary: Get the status of an operation
      operationId: getOperation
      description: |
        Get the status of an operation, with the HTTP response code as the
        response code of the operation.
      responses:
        200:
          description:
            The contents of the operation.  The resposne code will vary as to
            the current status of the operation itself.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      security:
        - AccessToken: []
    put:
      tags:
        - Operation
      summary: Update the status of an operation
      operationId: putOperation
      description: |
        Update the status of the operation.
      requestBody:
        description: The operation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operation'
      responses:
        200:
          description: The contents of the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      security:
        - AccessToken: []

  #############################################################################
  # Session
  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
    post:
      tags:
        - Session
      summary:
        Create a new session
      description:
        Create a new session on behalf of a new user, or to allow an existing
        user to reconfigure their integration.
      operationId: createSession
      requestBody:
        $ref: '#/components/requestBodies/PostSessionBody'
      responses:
        200:
          description: The created session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session/{sessionId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/SessionId'
    get:
      tags:
        - Session
      summary:
        Get a session
      description:
        Get the inputs and outputs of an existing session.
      operationId: getSession
      responses:
        200:
          description: The session object with results from any operations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResult'
      security:
        - AccessToken: []

    put:
      tags:
        - Session
      summary:
        Update a session's output
      description:
        Write the outputs of an configuration to a session. Primarily used in on
        configuration form submission in an integration, or in a connector.
      operationId: putSession
      requestBody:
        $ref: '#/components/requestBodies/PutSessionBody'
      responses:
        200:
          description: The created session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResult'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session/{sessionId}/commit:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/SessionId'
    post:
      tags:
        - Session
      summary:
        Commit a session
      description:
        Commit the session, creating the necessary instance and identity
        objects, or updating the configuration of existing objects as necessary.
      operationId: postSession
      responses:
        202:
          description: The session is being created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewOperation'

  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session/{sessionId}/start:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/SessionId'
    get:
      tags:
        - Session
      summary:
        Start the browser
      description:
        Redirect the browser to this URL to start the session.
      operationId: startSession
      responses:
        302:
          description:
            The configuration url of the first component in the session.
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/{entityType}/{entityId}/session/{sessionId}/callback:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - $ref: '#/components/parameters/EntityType'
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/SessionId'
    get:
      tags:
        - Session
      summary:
        Browser finishes a session
      description:
        Used by the component to pass control back to the session, allowing the
        browser to move on to the next step in the configuration process.
      operationId: continueSession
      responses:
        302:
          description:
            The configuration url of the first component in the session.
      security:
        - AccessToken: []

  #############################################################################
  # Connector
  /v2/account/{accountId}/subscription/{subscriptionId}/connector:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
    get:
      tags:
        - Connector
      summary: Search for and retrieve objects of the specified type
      operationId: searchConnectors
      parameters:
        - $ref: '#/components/parameters/SearchIdPrefix'
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
        - $ref: '#/components/parameters/SearchOperation'
      responses:
        200:
          description: A list of the objects found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
      security:
        - AccessToken: []
    post:
      tags:
        - Connector
      summary: Create a new object of the specified type
      operationId: postConnector
      requestBody:
        $ref: '#/components/requestBodies/PostConnectorBody'
      responses:
        200:
          description: The created object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorEntity'
        202:
          description: The object creation is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationIdUrlResponse'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/connector/{connectorId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: connectorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - Connector
      summary: Get a component
      operationId: getConnector
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorEntity'
      security:
        - AccessToken: []
    put:
      tags:
        - Connector
      summary: Update a component
      operationId: putConnector
      requestBody:
        $ref: '#/components/requestBodies/PostConnectorBody'
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorEntity'
        202:
          description: The object update is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationIdUrlResponse'
      security:
        - AccessToken: []
    delete:
      tags:
        - Connector
      summary: Delete a component
      operationId: deleteConnector
      responses:
        200:
          description: The object deletion succeeded
        202:
          description: The object deletion is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationIdUrlResponse'
      security:
        - AccessToken: []

  #############################################################################
  # Identity
  /v2/account/{accountId}/subscription/{subscriptionId}/connector/{connectorId}/identity/:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: connectorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - Identity
      summary: Get all identities for a given connector
      operationId: searchIdentities
      parameters:
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
      responses:
        200:
          description: A list of the objects found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityList'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/connector/{connectorId}/identity/{identityId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: connectorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      - name: identityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdentityId'
    get:
      tags:
        - Identity
      summary: Get an identity
      operationId: getIdentity
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityEntity'
      security:
        - AccessToken: []
    put:
      tags:
        - Identity
      summary: Update a component
      operationId: putIdentity
      requestBody:
        $ref: '#/components/requestBodies/PostIdentityBody'
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityEntity'
      security:
        - AccessToken: []
    delete:
      tags:
        - Identity
      summary: Delete an identity
      operationId: deleteIdentity
      responses:
        200:
          description: The object deletion succeeded
      security:
        - AccessToken: []

  #############################################################################
  # Integration
  /v2/account/{accountId}/subscription/{subscriptionId}/integration:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
    get:
      tags:
        - Integration
      summary: Search for and retrieve objects of the specified type
      operationId: searchIntegrations
      parameters:
        - $ref: '#/components/parameters/SearchIdPrefix'
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
        - $ref: '#/components/parameters/SearchOperation'
      responses:
        200:
          description: A list of the objects found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationList'
      security:
        - AccessToken: []
    post:
      tags:
        - Integration
      summary: Create a new object of the specified type
      operationId: postIntegration
      requestBody:
        $ref: '#/components/requestBodies/PostIntegrationBody'
      responses:
        200:
          description: The created object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationEntity'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/integration/{integrationId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: integrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - Integration
      summary: Get a component
      operationId: getIntegration
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationEntity'
      security:
        - AccessToken: []
    put:
      tags:
        - Integration
      summary: Update a component
      operationId: putIntegration
      requestBody:
        $ref: '#/components/requestBodies/PostIntegrationBody'
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationEntity'
        202:
          description: The object update is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationIdUrlResponse'
      security:
        - AccessToken: []
    delete:
      tags:
        - Integration
      summary: Delete a component
      operationId: deleteIntegration
      responses:
        200:
          description: The object deletion succeeded
        202:
          description: The object deletion is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationIdUrlResponse'
      security:
        - AccessToken: []

  #############################################################################
  # Instance
  /v2/account/{accountId}/subscription/{subscriptionId}/integration/{integrationId}/instance/:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: integrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - Instance
      summary: Get all instances for a given integration
      operationId: searchInstances
      parameters:
        - $ref: '#/components/parameters/SearchCount'
        - $ref: '#/components/parameters/SearchNext'
        - $ref: '#/components/parameters/SearchTag'
        - $ref: '#/components/parameters/SearchOperation'
      responses:
        200:
          description: A list of the objects found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
      security:
        - AccessToken: []

  /v2/account/{accountId}/subscription/{subscriptionId}/integration/{integrationId}/instance/{instanceId}:
    parameters:
      - $ref: '#/components/parameters/Account'
      - $ref: '#/components/parameters/Subscription'
      - name: integrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      - name: instanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InstanceId'
    get:
      tags:
        - Instance
      summary: Get an instance
      operationId: getInstance
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceEntity'
      security:
        - AccessToken: []
    put:
      tags:
        - Instance
      summary: Update a component
      operationId: putInstance
      requestBody:
        $ref: '#/components/requestBodies/PostInstanceBody'
      responses:
        200:
          description: The requested object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceEntity'
      security:
        - AccessToken: []
    delete:
      tags:
        - Instance
      summary: Delete an instance
      operationId: deleteInstance
      responses:
        200:
          description: The object deletion succeeded
      security:
        - AccessToken: []

#############################################################################
# Components

components:
  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description:
        For a description of the access token format, see
        [this doc](../../integrator-guide/authz-model).

  parameters:
    Account:
      name: accountId
      in: path
      required: true
      description: Account id
      schema:
        $ref: '#/components/schemas/AccountId'
    Subscription:
      name: subscriptionId
      in: path
      required: true
      description: Subscription id
      schema:
        $ref: '#/components/schemas/SubscriptionId'
    EntityType:
      name: entityType
      required: true
      in: path
      description: The type of the entity
      schema:
        $ref: '#/components/schemas/EntityType'
    EntityId:
      name: entityId
      in: path
      required: true
      description: The id of the entity
      schema:
        $ref: '#/components/schemas/EntityId'
    SessionId:
      name: sessionId
      in: path
      required: true
      description: The id of the session
      schema:
        $ref: '#/components/schemas/SessionId'

    SearchIdPrefix:
      name: idPrefix
      in: query
      schema:
        type: string
    SearchCount:
      name: count
      in: query
      description: The maximum number of entries to return
      schema:
        type: number
    SearchNext:
      name: next
      in: query
      description: The key to use to retrieve the next set of results
      schema:
        type: string
    SearchTag:
      name: tag
      in: query
      description: A tag or tag=value to search for
      schema:
        type: string
    SearchOperation:
      name: operationId
      in: query
      description: Get the associated entity that this operation is creating
      schema:
        $ref: '#/components/schemas/OperationId'

  requestBodies:
    PostConnectorBody:
      description: Upload a new object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorEntity'

    PostIdentityBody:
      description: Upload a new object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdentityEntity'

    PostIntegrationBody:
      description: Upload a new object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IntegrationEntity'

    PostInstanceBody:
      description: Upload a new object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InstanceEntity'

    PostSessionBody:
      description: Create a new session on an integration
      content:
        application/json:
          schema:
            type: object
            required:
              - redirectUrl
            properties:
              components:
                type: array
                description:
                  A list of the desired components to configure. If not present,
                  then all components specified in the integration are
                  configured in this session.
                items:
                  type: string
              tags:
                $ref: '#/components/schemas/EntityTags'
              extendTags:
                description:
                  Add tags here to be applied to each of the instances and
                  identities created through this session.
                allOf:
                  - $ref: '#/components/schemas/EntityTags'
              input:
                $ref: '#/components/schemas/SessionInput'
              redirectUrl:
                type: string
                description:
                  The URL in your infrastructure that the user should return to
                  after completing the session.
              instanceId:
                type: string
                description:
                  Used when reconfiguring an existing user. Specifies the
                  instance associated with that user.

    PutSessionBody:
      description: The results of a configuration action, such as a form.
      content:
        application/json:
          schema:
            type: object

  schemas:
    AccountId:
      type: string
      description: Account id
      example: 'acc-5555555555555555'

    SubscriptionId:
      type: string
      description: Subscription id
      example: 'sub-5555555555555555'

    EntityId:
      type: string
      description: |
        The name of an entity, matches: `/^[A-Za-z0-9\-]{1,64}$/)`

    InstanceId:
      type: string
      format: uuid

    IdentityId:
      type: string
      format: uuid

    EntityType:
      type: string
      enum: [connector, integration, identity, instance]
      example: connector

    EntityTags:
      type: object
      description: An object containing tags set on this entity
      example:
        tenant: tenant-525
        customer: Sonicity

    EntityVersion:
      type: string
      format: uuid

    EntityExpires:
      type: string
      description: The time that the entity expires.

    OperationId:
      type: string
      format: uuid
      example: 00000000-0000-0000-0000-000000000000

    Operation:
      type: object
      required:
        - verb
        - type
        - statusCode
      properties:
        verb:
          type: string
          description: The human-readable verb for the action being performed
          example: creating
        type:
          type: string
          description: The type of the object being worked upon
          example: connector
        statusCode:
          type: number
          description:
            An HTTP status code indicating the current status of the
            operation
          example: 200
        message:
          type: string
          description:
            An arbitrary message to be passed on to the user concerning the
            state of the operation
          example: The operation completed successfully
        location:
          $ref: '#/components/schemas/EntityLocation'
        operationId:
          $ref: '#/components/schemas/OperationId'

    NewOperation:
      type: object
      required:
        - operationId
        - target
        - statusOnly
      properties:
        operationId:
          type: string
          format: uuid
        target:
          type: string
          format: url
        statusOnly:
          type: string
          format: url

    SessionId:
      type: string
      format: uuid
      description: The id of the session

    Session:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SessionId'

    SessionResult:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        input:
          type: object
        output:
          type: object
        dependsOn:
          type: object

    SessionInput:
      type: object
      example:
        slack-integration:
          useDemo: true
      description:
        A collection of input variables to make available to
        components as they are configured. Each key must correspond
        with an entry in the component array, and carries
        configuration that will only be available to that component.

    SessionOutput:
      type: object
      example:
        slack-integration:
          channel: "#general"
      description:
        A collection of output configuration elements created by the various
        steps, and stored on the instance for use in the integration.

    EntityLocation:
      type: object
      required:
        - accountId
        - subscriptionId
        - entityId
        - entityType
      description:
        The location of a particular object.
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        subscriptionId:
          $ref: '#/components/schemas/SubscriptionId'
        entityId:
          $ref: '#/components/schemas/EntityId'
        entityType:
          $ref: '#/components/schemas/EntityType'

    OperationIdResponse:
      type: object
      required:
        - operationId
      description: A valid operation id for this operation.
      properties:
        operationId:
          $ref: '#/components/schemas/OperationId'

    OperationIdUrlResponse:
      type: object
      required:
        - operationId
      description: A valid operation id for this operation.
      properties:
        operationId:
          $ref: '#/components/schemas/OperationId'
        target:
          type: string
          description:
            Query this URL to track the status of the operation and, when
            complete, receive the resulting object in the format of a list
            operation.
        statusOnly:
          type: string
          description:
            This URL is a public URL suitable to be passed to an untrusted
            client such as a web browser to drive an in-progress spinner. The
            URL is always a GET request for `../operation/{operationId}`.

    ConnectorEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          type: object
          properties:
            handler:
              type: string
              description: The npm package name used by this connector.
              example: '@fusebit-int/oauth-connector'
            configuration:
              type: object
              description:
                The collection of configuration values used by this entity.
            files:
              type: object
              description:
                Additional files used by this entity.
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'

    ConnectorListEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          type: object
          properties:
            handler:
              type: string
              description: The npm package name used by this connector.
              example: '@fusebit-int/oauth-connector'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'


    ConnectorList:
      type: object
      properties:
        items:
          type: array
          description:
            An array of the matching objects of this component type
          items:
            $ref: '#/components/schemas/ConnectorListEntity'
        next:
          type: string
          description:
            The key to use when accessing the next block of entries
        total:
          type: number
          description:
            The total number of entities of this type.

    IdentityEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        data:
          type: object
          description:
            The data used by the creating connector to establish a relationship
            with the remote service on behalf of a user.
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'

    IdentityList:
      type: object
      properties:
        items:
          type: array
          description:
            An array of the matching objects of this component type
          items:
            $ref: '#/components/schemas/IdentityEntity'
        next:
          type: string
          description:
            The key to use when accessing the next block of entries
        total:
          type: number
          description:
            The total number of entities of this type.

    IntegrationData:
      type: object
      properties:
        handler:
          type: string
          description:
            The name of the file that is the entrypoint for this integration.
          example: './integration'
        configuration:
          type: object
          description:
            An arbirary configuration object for parameters used by this
            integration.
        files:
          type: object
          description:
            An array of files, keyed by filename, that are included in this
            integration. This usually includes the file referenced by the
            `handler` field.
        componentTags:
          type: object
          description:
            These tags are added to instances and identities created through
            this integration.
        components:
          type: array
          description:
            Connectors and other configuration endpoints such as forms located
            on this integration are itemized here, in order that the client will
            encounter them.
          items:
            type: object
            properties:
              name:
                type: string
                description:
                  An arbirary name used to reference this component from within
                  integration code.
              entityType:
                type: string
                enum: [connector, integration]
                description:
                  Does this component reference a connector or an integration?
              entityId:
                $ref: '#/components/schemas/EntityId'
              skip:
                type: boolean
                default: false
                description:
                  Some components are only used in special cases and as
                  specified during session creation; if `skip` is true, then
                  this component is not part of the normal client configuration
                  process.
              path:
                type: string
                description:
                  The location under the entity specified to pass the client to
                  during a configuration process.
                example:
                  /api/authorize
                  /api/channelSelectForm
              dependsOn:
                type: array
                description:
                  Allows this component to make use of the credentials or
                  configuration values created by prior components. For example,
                  a form could use slack credentials created by a connector
                  named `slack` to lookup channels by adding `slack` to this
                  list.
                items:
                  type: string
                  description:
                    The `name` of a component that occurs previously in the
                    `components` array.
              provider:
                type: string
                description:
                  The utility package for a connector that provides a configured
                  SDK for use by the integration.

    IntegrationListData:
      type: object
      properties:
        handler:
          type: string
          description:
            The name of the file that is the entrypoint for this integration.
          example: './integration'
        componentTags:
          type: object
          description:
            These tags are added to instances and identities created through
            this integration.
        components:
          type: array
          description:
            Connectors and other configuration endpoints such as forms located
            on this integration are itemized here, in order that the client will
            encounter them.
          items:
            type: object
            properties:
              name:
                type: string
                description:
                  An arbirary name used to reference this component from within
                  integration code.
              entityType:
                type: string
                enum: [connector, integration]
                description:
                  Does this component reference a connector or an integration?
              entityId:
                $ref: '#/components/schemas/EntityId'
              skip:
                type: boolean
                default: false
                description:
                  Some components are only used in special cases and as
                  specified during session creation; if `skip` is true, then
                  this component is not part of the normal client configuration
                  process.
              path:
                type: string
                description:
                  The location under the entity specified to pass the client to
                  during a configuration process.
                example:
                  /api/authorize
                  /api/channelSelectForm
              dependsOn:
                type: array
                description:
                  Allows this component to make use of the credentials or
                  configuration values created by prior components. For example,
                  a form could use slack credentials created by a connector
                  named `slack` to lookup channels by adding `slack` to this
                  list.
                items:
                  type: string
                  description:
                    The `name` of a component that occurs previously in the
                    `components` array.
              provider:
                type: string
                description:
                  The utility package for a connector that provides a configured
                  SDK for use by the integration.

    IntegrationEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/IntegrationData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'

    IntegrationListEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        data:
          $ref: '#/components/schemas/IntegrationListData'
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'

    IntegrationList:
      type: object
      properties:
        items:
          type: array
          description:
            An array of the matching objects of this component type
          items:
            $ref: '#/components/schemas/IntegrationListEntity'
        next:
          type: string
          description:
            The key to use when accessing the next block of entries
        total:
          type: number
          description:
            The total number of entities of this type.

    InstanceEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InstanceId'
        data:
          type: object
          description:
            A collection of configuration objects key'ed by the `name` in the
            `components` object under the integration. A configuration object
            that refers to a integration form will contain the configured value,
            whereas a configuration object that refers to a connector will refer
            to the identity object used by this instance.
          example:
            slack:
              tags:
                tenantId: client-15251
              entityId: f31bc788-1a15-4d6d-b10e-bb754bbf555d
              accountId: acc-12de369f2f0c4982
              entityType: identity
              parentEntityId: slack-connector
              subscriptionId: sub-a477d980e09c1cfe
              parentEntityType: connector
            channelSelectForm:
              channel: \#random
        tags:
          $ref: '#/components/schemas/EntityTags'
        version:
          $ref: '#/components/schemas/EntityVersion'
        expires:
          $ref: '#/components/schemas/EntityExpires'

    InstanceList:
      type: object
      properties:
        items:
          type: array
          description:
            An array of the matching objects of this component type
          items:
            $ref: '#/components/schemas/InstanceEntity'
        next:
          type: string
          description:
            The key to use when accessing the next block of entries
        total:
          type: number
          description:
            The total number of entities of this type.
